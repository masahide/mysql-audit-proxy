name: rpmbuild

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - '__build-test*'

env:
  APP_NAME: 'mysql-audit-proxy'
  LOGDECODER_NAME: 'mysql-audit-proxy-logdecoder'
  MAINTAINER: 'masahide'
  DESC: 'Proxy for mysql audit recording'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.17.2'
    - run: go version

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Test code
      run: go test -v ./...

  build-artifact:
    name: Build RPMs
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [mac64, llin64]
        include:
        - os: mac64
          goos: darwin
        - os: lin64
          goos: linux
          arch: amd64
    steps: 
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.2'
      - run: go version
      - uses: actions/checkout@v1
      - name: Create artifact
        env:
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.arch }}
        run: |
          GOOS=$goos GOARCH=$goarch go build -v -o bin/${{ env.APP_NAME }} .
          GOOS=$goos GOARCH=$goarch go build -v -o bin/${{ env.LOGDECODER_NAME }} decoder/main.go
          assets="${{ env.APP_NAME }}_$(echo "$goos-$goarch" | tr '[:upper:]' '[:lower:]')"
          mkdir dist
          echo "$assets"
          mkdir -p "dist/$assets"
          cp -r bin/* LICENSE README.* "dist/$assets/"
          (
            cd dist
            tar czf "$assets.tar.gz" "$assets"
            ls -lah *.*
          )
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: artifact-${{ matrix.os }}
          path: |
            dist/*.tar.gz
  build-linux-packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.2'
      - run: go version
      - uses: actions/checkout@v1
      - name: Go build
        env:
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.arch }}
        run: |
          GOOS=$goos GOARCH=$goarch go build -v -o bin/${{ env.APP_NAME }} .
          GOOS=$goos GOARCH=$goarch go build -v -o bin/${{ env.LOGDECODER_NAME }} decoder/main.go
          mkdir -p .debpkg/usr/bin
          mkdir -p .rpmpkg/usr/bin
          cp -p bin/* .debpkg/usr/local/bin/
          cp -p bin/* .rpmpkg/usr/local/bin/
      - uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.APP_NAME }}
          package_root: .debpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ github.ref }}
          arch: 'amd64'
          desc: '${{ env.DESC }}'

      - uses: jiro4989/build-rpm-action@v2
        with:
          summary: '${{ env.DESC }}'
          package: ${{ env.APP_NAME }}
          package_root: .rpmpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ github.ref }}
          arch: 'x86_64'
          desc: '${{ env.DESC }}'

      - uses: actions/upload-artifact@v2
        with:
          name: artifact-deb
          path: |
            ./*.deb
      - uses: actions/upload-artifact@v2
        with:
          name: artifact-rpm
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm
